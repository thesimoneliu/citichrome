{"version":3,"file":"asText.cjs","sources":["../../src/asText.ts"],"sourcesContent":["import { asText as baseAsText } from \"@prismicio/richtext\";\nimport { RichTextField } from \"@prismicio/types\";\n\n/**\n * The return type of `asText()`.\n */\ntype AsTextReturnType<Field extends RichTextField | null | undefined> =\n\tField extends RichTextField ? string : null;\n\n/**\n * Serializes a rich text or title field to a plain text string\n *\n * @param richTextField - A rich text or title field from Prismic\n * @param separator - Separator used to join each element, defaults to a space\n *\n * @returns Plain text equivalent of the provided rich text or title field\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const asText = <Field extends RichTextField | null | undefined>(\n\trichTextField: Field,\n\tseparator?: string,\n): AsTextReturnType<Field> => {\n\tif (richTextField) {\n\t\treturn baseAsText(richTextField, separator) as AsTextReturnType<Field>;\n\t} else {\n\t\treturn null as AsTextReturnType<Field>;\n\t}\n};\n"],"names":["baseAsText"],"mappings":";;;AAkBa,MAAA,SAAS,CACrB,eACA,cAC4B;AAC5B,MAAI,eAAe;AACX,WAAAA,SAAA,OAAW,eAAe,SAAS;AAAA,EAAA,OACpC;AACC,WAAA;AAAA,EACP;AACF;;"}