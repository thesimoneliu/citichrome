export declare const predicate: {
    /**
     * The `at` predicate checks that the path matches the described value
     * exactly. It takes a single value for a field or an array (only for tags).
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#at}
     */
    at: (path: string, value: string | number | boolean | string[] | Date) => string;
    /**
     * The `not` predicate checks that the path doesn't match the provided value
     * exactly. It takes a single value for a field or an array (only for tags).
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#not}
     */
    not: (path: string, value: string | number | boolean | string[] | Date) => string;
    /**
     * The `any` predicate takes an array of values. It works exactly the same way
     * as the `at` operator, but checks whether the fragment matches any of the
     * values in the array.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#any}
     */
    any: (path: string, values: (string | number | boolean | Date)[]) => string;
    /**
     * The `in` predicate is used specifically to retrieve an array of documents
     * by their IDs or UIDs. This predicate is much more efficient at this than
     * the any predicate.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#in}
     */
    in: (path: string, values: string[]) => string;
    /**
     * The `fulltext` predicate provides two capabilities:
     *
     * 1. Checking if a certain string is anywhere inside a document (this is what
     *    you should use to make your project's search engine feature)
     * 2. Checking if the string is contained inside a specific custom typeâ€™s Rich
     *    Text or Key Text fragment.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#fulltext}
     */
    fulltext: (path: string, searchTerms: string) => string;
    /**
     * The `has` predicate checks whether a fragment has a value. It will return
     * all the documents of the specified type that contain a value for the
     * specified field.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#has}
     */
    has: (path: string) => string;
    /**
     * The `missing` predicate checks if a fragment doesn't have a value. It will
     * return all the documents of the specified type that do not contain a value
     * for the specified field.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#missing}
     */
    missing: (path: string) => string;
    /**
     * The `similar` predicate takes the ID of a document, and returns a list of
     * documents with similar content. This allows you to build an automated
     * content discovery feature (for example, a "Related posts" section).
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#similar}
     */
    similar: (id: string, value: number) => string;
    /**
     * The `geopoint.near` predicate checks that the value in the path is within
     * the radius of the given coordinates.
     *
     * This predicate will only work for a GeoPoint field.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#near}
     */
    geopointNear: (path: string, latitude: number, longitude: number, radius: number) => string;
    /**
     * The `number.lt` predicate checks that the value in the number field is less
     * than the value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#lt-less-than}
     */
    numberLessThan: (path: string, value: number) => string;
    /**
     * The `number.gt` predicate checks that the value in the number field is
     * greater than the value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#gt-greater-than}
     */
    numberGreaterThan: (path: string, value: number) => string;
    /**
     * The `number.inRange` predicate checks that the value in the path is within
     * the two values passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/query-predicates-reference-rest-api#inrange}
     */
    numberInRange: (path: string, lowerLimit: number, upperLimit: number) => string;
    /**
     * The `date.after` predicate checks that the value in the path is after the
     * date value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#after}
     */
    dateAfter: (path: string, date: string | number | Date) => string;
    /**
     * The `date.before` predicate checks that the value in the path is before the
     * date value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#before}
     */
    dateBefore: (path: string, date: string | number | Date) => string;
    /**
     * The `date.between` predicate checks that the value in the path is within
     * the date values passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#between}
     */
    dateBetween: (path: string, startDate: string | number | Date, endDate: string | number | Date) => string;
    /**
     * The `date.day-of-month` predicate checks that the value in the path is
     * equal to the day of the month passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#dayofmonth}
     */
    dateDayOfMonth: (path: string, day: number) => string;
    /**
     * The `date.day-of-month-after` predicate checks that the value in the path
     * is after the day of the month passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#dayofmonthafter}
     */
    dateDayOfMonthAfter: (path: string, day: number) => string;
    /**
     * The `date.day-of-month-before` predicate checks that the value in the path
     * is before the day of the month passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#dayofmonthbefore}
     */
    dateDayOfMonthBefore: (path: string, day: number) => string;
    /**
     * The `date.day-of-week` predicate checks that the value in the path is equal
     * to the day of the week passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#dayofweek}
     */
    dateDayOfWeek: (path: string, day: string | number) => string;
    /**
     * The `date.day-of-week-after` predicate checks that the value in the path is
     * after the day of the week passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#dayofweekafter}
     */
    dateDayOfWeekAfter: (path: string, day: string | number) => string;
    /**
     * The date.day-of-week-before predicate checks that the value in the path is
     * before the day of the week passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#dayofweekbefore}
     */
    dateDayOfWeekBefore: (path: string, day: string | number) => string;
    /**
     * The `date.month` predicate checks that the value in the path occurs in the
     * month value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#month}
     */
    dateMonth: (path: string, month: string | number) => string;
    /**
     * The `date.month-after` predicate checks that the value in the path occurs
     * in any month after the value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#monthafter}
     */
    dateMonthAfter: (path: string, month: string | number) => string;
    /**
     * The `date.month-before` predicate checks that the value in the path occurs
     * in any month before the value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#monthbefore}
     */
    dateMonthBefore: (path: string, month: string | number) => string;
    /**
     * The `date.year` predicate checks that the value in the path occurs in the
     * year value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#year}
     */
    dateYear: (path: string, year: number) => string;
    /**
     * The `date.hour` predicate checks that the value in the path occurs within
     * the hour value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#hour}
     */
    dateHour: (path: string, hour: number) => string;
    /**
     * The `date.hour-after` predicate checks that the value in the path occurs
     * after the hour value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#hourafter}
     */
    dateHourAfter: (path: string, hour: number) => string;
    /**
     * The `date.hour-before` predicate checks that the value in the path occurs
     * before the hour value passed into the predicate.
     *
     * {@link https://prismic.io/docs/technologies/date-and-time-based-predicate-reference-rest-api#hourbefore}
     */
    dateHourBefore: (path: string, hour: number) => string;
};
