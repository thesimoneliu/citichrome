"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const prismicH = require("@prismicio/helpers");
const appendPredicates = require("./lib/appendPredicates.cjs");
const castArray = require("./lib/castArray.cjs");
const castThunk = require("./lib/castThunk.cjs");
const findMasterRef = require("./lib/findMasterRef.cjs");
const findRefByID = require("./lib/findRefByID.cjs");
const findRefByLabel = require("./lib/findRefByLabel.cjs");
const getPreviewCookie = require("./lib/getPreviewCookie.cjs");
const minifyGraphQLQuery = require("./lib/minifyGraphQLQuery.cjs");
const ForbiddenError = require("./ForbiddenError.cjs");
const NotFoundError = require("./NotFoundError.cjs");
const ParsingError = require("./ParsingError.cjs");
const PrismicError = require("./PrismicError.cjs");
const buildQueryURL = require("./buildQueryURL.cjs");
const getRepositoryEndpoint = require("./getRepositoryEndpoint.cjs");
const isRepositoryEndpoint = require("./isRepositoryEndpoint.cjs");
const predicate = require("./predicate.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const prismicH__namespace = /* @__PURE__ */ _interopNamespaceDefault(prismicH);
const MAX_PAGE_SIZE = 100;
const REPOSITORY_CACHE_TTL = 5e3;
const GET_ALL_QUERY_DELAY = 500;
var RefStateMode;
(function(RefStateMode2) {
  RefStateMode2["Master"] = "Master";
  RefStateMode2["ReleaseID"] = "ReleaseID";
  RefStateMode2["ReleaseLabel"] = "ReleaseLabel";
  RefStateMode2["Manual"] = "Manual";
})(RefStateMode || (RefStateMode = {}));
const typePredicate = (documentType) => predicate.predicate.at("document.type", documentType);
const everyTagPredicate = (tags) => predicate.predicate.at("document.tags", castArray.castArray(tags));
const someTagsPredicate = (tags) => predicate.predicate.any("document.tags", castArray.castArray(tags));
const createClient = (repositoryNameOrEndpoint, options) => new Client(repositoryNameOrEndpoint, options);
class Client {
  constructor(repositoryNameOrEndpoint, options = {}) {
    __publicField(this, "endpoint");
    __publicField(this, "accessToken");
    __publicField(this, "routes");
    __publicField(this, "brokenRoute");
    __publicField(this, "fetchFn");
    __publicField(this, "defaultParams");
    __publicField(this, "refState", {
      mode: RefStateMode.Master,
      autoPreviewsEnabled: true
    });
    __publicField(this, "cachedRepository");
    __publicField(this, "cachedRepositoryExpiration", 0);
    __publicField(this, "graphqlFetch", this.graphQLFetch.bind(this));
    if (isRepositoryEndpoint.isRepositoryEndpoint(repositoryNameOrEndpoint)) {
      if (process.env.NODE_ENV === "development" && /\.prismic\.io\/(?!api\/v2\/?)/.test(repositoryNameOrEndpoint)) {
        throw new PrismicError.PrismicError("@prismicio/client only supports Prismic Rest API V2. Please provide only the repository name to the first createClient() parameter or use the getRepositoryEndpoint() helper to generate a valid Rest API V2 endpoint URL.", void 0, void 0);
      }
      this.endpoint = repositoryNameOrEndpoint;
    } else {
      this.endpoint = getRepositoryEndpoint.getRepositoryEndpoint(repositoryNameOrEndpoint);
    }
    this.accessToken = options.accessToken;
    this.routes = options.routes;
    this.brokenRoute = options.brokenRoute;
    this.defaultParams = options.defaultParams;
    if (options.ref) {
      this.queryContentFromRef(options.ref);
    }
    if (typeof options.fetch === "function") {
      this.fetchFn = options.fetch;
    } else if (typeof globalThis.fetch === "function") {
      this.fetchFn = globalThis.fetch;
    } else {
      throw new PrismicError.PrismicError("A valid fetch implementation was not provided. In environments where fetch is not available (including Node.js), a fetch implementation must be provided via a polyfill or the `fetch` option.", void 0, void 0);
    }
    if (this.fetchFn === globalThis.fetch) {
      this.fetchFn = this.fetchFn.bind(globalThis);
    }
    this.graphQLFetch = this.graphQLFetch.bind(this);
  }
  enableAutoPreviews() {
    this.refState.autoPreviewsEnabled = true;
  }
  enableAutoPreviewsFromReq(req) {
    this.refState.httpRequest = req;
    this.refState.autoPreviewsEnabled = true;
  }
  disableAutoPreviews() {
    this.refState.autoPreviewsEnabled = false;
  }
  async query(predicates, params) {
    const url = await this.buildQueryURL({ ...params, predicates });
    return await this.fetch(url, params);
  }
  async get(params) {
    const url = await this.buildQueryURL(params);
    return await this.fetch(url, params);
  }
  async getFirst(params) {
    var _a;
    const actualParams = { ...params };
    if (!(params && params.page) && !(params == null ? void 0 : params.pageSize)) {
      actualParams.pageSize = ((_a = this.defaultParams) == null ? void 0 : _a.pageSize) ?? 1;
    }
    const url = await this.buildQueryURL(actualParams);
    const result = await this.fetch(url, params);
    const firstResult = result.results[0];
    if (firstResult) {
      return firstResult;
    }
    throw new PrismicError.PrismicError("No documents were returned", url, void 0);
  }
  async dangerouslyGetAll(params = {}) {
    var _a;
    const { limit = Infinity, ...actualParams } = params;
    const resolvedParams = {
      ...actualParams,
      pageSize: Math.min(limit, actualParams.pageSize || ((_a = this.defaultParams) == null ? void 0 : _a.pageSize) || MAX_PAGE_SIZE)
    };
    const documents = [];
    let latestResult;
    while ((!latestResult || latestResult.next_page) && documents.length < limit) {
      const page = latestResult ? latestResult.page + 1 : void 0;
      latestResult = await this.get({ ...resolvedParams, page });
      documents.push(...latestResult.results);
      if (latestResult.next_page) {
        await new Promise((res) => setTimeout(res, GET_ALL_QUERY_DELAY));
      }
    }
    return documents.slice(0, limit);
  }
  async getByID(id, params) {
    return await this.getFirst(appendPredicates.appendPredicates(params, predicate.predicate.at("document.id", id)));
  }
  async getByIDs(ids, params) {
    return await this.get(appendPredicates.appendPredicates(params, predicate.predicate.in("document.id", ids)));
  }
  async getAllByIDs(ids, params) {
    return await this.dangerouslyGetAll(appendPredicates.appendPredicates(params, predicate.predicate.in("document.id", ids)));
  }
  async getByUID(documentType, uid, params) {
    return await this.getFirst(appendPredicates.appendPredicates(params, [
      typePredicate(documentType),
      predicate.predicate.at(`my.${documentType}.uid`, uid)
    ]));
  }
  async getByUIDs(documentType, uids, params) {
    return await this.get(appendPredicates.appendPredicates(params, [
      typePredicate(documentType),
      predicate.predicate.in(`my.${documentType}.uid`, uids)
    ]));
  }
  async getAllByUIDs(documentType, uids, params) {
    return await this.dangerouslyGetAll(appendPredicates.appendPredicates(params, [
      typePredicate(documentType),
      predicate.predicate.in(`my.${documentType}.uid`, uids)
    ]));
  }
  async getSingle(documentType, params) {
    return await this.getFirst(appendPredicates.appendPredicates(params, typePredicate(documentType)));
  }
  async getByType(documentType, params) {
    return await this.get(appendPredicates.appendPredicates(params, typePredicate(documentType)));
  }
  async getAllByType(documentType, params) {
    return await this.dangerouslyGetAll(appendPredicates.appendPredicates(params, typePredicate(documentType)));
  }
  async getByTag(tag, params) {
    return await this.get(appendPredicates.appendPredicates(params, someTagsPredicate(tag)));
  }
  async getAllByTag(tag, params) {
    return await this.dangerouslyGetAll(appendPredicates.appendPredicates(params, someTagsPredicate(tag)));
  }
  async getByEveryTag(tags, params) {
    return await this.get(appendPredicates.appendPredicates(params, everyTagPredicate(tags)));
  }
  async getAllByEveryTag(tags, params) {
    return await this.dangerouslyGetAll(appendPredicates.appendPredicates(params, everyTagPredicate(tags)));
  }
  async getBySomeTags(tags, params) {
    return await this.get(appendPredicates.appendPredicates(params, someTagsPredicate(tags)));
  }
  async getAllBySomeTags(tags, params) {
    return await this.dangerouslyGetAll(appendPredicates.appendPredicates(params, someTagsPredicate(tags)));
  }
  async getRepository(params) {
    const url = new URL(this.endpoint);
    if (this.accessToken) {
      url.searchParams.set("access_token", this.accessToken);
    }
    return await this.fetch(url.toString(), params);
  }
  async getRefs(params) {
    const repository = await this.getRepository(params);
    return repository.refs;
  }
  async getRefByID(id, params) {
    const refs = await this.getRefs(params);
    return findRefByID.findRefByID(refs, id);
  }
  async getRefByLabel(label, params) {
    const refs = await this.getRefs(params);
    return findRefByLabel.findRefByLabel(refs, label);
  }
  async getMasterRef(params) {
    const refs = await this.getRefs(params);
    return findMasterRef.findMasterRef(refs);
  }
  async getReleases(params) {
    const refs = await this.getRefs(params);
    return refs.filter((ref) => !ref.isMasterRef);
  }
  async getReleaseByID(id, params) {
    const releases = await this.getReleases(params);
    return findRefByID.findRefByID(releases, id);
  }
  async getReleaseByLabel(label, params) {
    const releases = await this.getReleases(params);
    return findRefByLabel.findRefByLabel(releases, label);
  }
  async getTags(params) {
    try {
      const tagsForm = await this.getCachedRepositoryForm("tags", params);
      const url = new URL(tagsForm.action);
      if (this.accessToken) {
        url.searchParams.set("access_token", this.accessToken);
      }
      return await this.fetch(url.toString(), params);
    } catch {
      const repository = await this.getRepository(params);
      return repository.tags;
    }
  }
  async buildQueryURL({ signal, ...params } = {}) {
    const ref = params.ref || await this.getResolvedRefString();
    const integrationFieldsRef = params.integrationFieldsRef || (await this.getCachedRepository({ signal })).integrationFieldsRef || void 0;
    return buildQueryURL.buildQueryURL(this.endpoint, {
      ...this.defaultParams,
      ...params,
      ref,
      integrationFieldsRef,
      routes: params.routes || this.routes,
      brokenRoute: params.brokenRoute || this.brokenRoute,
      accessToken: params.accessToken || this.accessToken
    });
  }
  async resolvePreviewURL(args) {
    var _a, _b;
    let documentID = args.documentID;
    let previewToken = args.previewToken;
    if (typeof globalThis.location !== "undefined") {
      const searchParams = new URLSearchParams(globalThis.location.search);
      documentID = documentID || searchParams.get("documentId");
      previewToken = previewToken || searchParams.get("token");
    } else if (this.refState.httpRequest) {
      if ("query" in this.refState.httpRequest) {
        documentID = documentID || ((_a = this.refState.httpRequest.query) == null ? void 0 : _a.documentId);
        previewToken = previewToken || ((_b = this.refState.httpRequest.query) == null ? void 0 : _b.token);
      } else if ("url" in this.refState.httpRequest && this.refState.httpRequest.url) {
        const searchParams = new URL(this.refState.httpRequest.url).searchParams;
        documentID = documentID || searchParams.get("documentId");
        previewToken = previewToken || searchParams.get("token");
      }
    }
    if (documentID != null && previewToken != null) {
      const document = await this.getByID(documentID, {
        signal: args.signal,
        ref: previewToken,
        lang: "*"
      });
      const url = prismicH__namespace.asLink(document, args.linkResolver);
      if (typeof url === "string") {
        return url;
      }
    }
    return args.defaultURL;
  }
  queryLatestContent() {
    this.refState.mode = RefStateMode.Master;
  }
  queryContentFromReleaseByID(releaseID) {
    this.refState = {
      ...this.refState,
      mode: RefStateMode.ReleaseID,
      releaseID
    };
  }
  queryContentFromReleaseByLabel(releaseLabel) {
    this.refState = {
      ...this.refState,
      mode: RefStateMode.ReleaseLabel,
      releaseLabel
    };
  }
  queryContentFromRef(ref) {
    this.refState = {
      ...this.refState,
      mode: RefStateMode.Manual,
      ref
    };
  }
  async graphQLFetch(input, init) {
    const cachedRepository = await this.getCachedRepository();
    const ref = await this.getResolvedRefString();
    const unsanitizedHeaders = {
      "Prismic-ref": ref,
      Authorization: this.accessToken ? `Token ${this.accessToken}` : "",
      ...init ? init.headers : {}
    };
    if (cachedRepository.integrationFieldsRef) {
      unsanitizedHeaders["Prismic-integration-field-ref"] = cachedRepository.integrationFieldsRef;
    }
    const headers = {};
    for (const key in unsanitizedHeaders) {
      if (unsanitizedHeaders[key]) {
        headers[key.toLowerCase()] = unsanitizedHeaders[key];
      }
    }
    const url = new URL(
      input
    );
    url.searchParams.set("ref", ref);
    const query = url.searchParams.get("query");
    if (query) {
      url.searchParams.set(
        "query",
        minifyGraphQLQuery.minifyGraphQLQuery(query)
      );
    }
    return await this.fetchFn(url.toString(), {
      ...init,
      headers
    });
  }
  async getCachedRepository(params) {
    if (!this.cachedRepository || Date.now() >= this.cachedRepositoryExpiration) {
      this.cachedRepositoryExpiration = Date.now() + REPOSITORY_CACHE_TTL;
      this.cachedRepository = await this.getRepository(params);
    }
    return this.cachedRepository;
  }
  async getCachedRepositoryForm(name, params) {
    const cachedRepository = await this.getCachedRepository(params);
    const form = cachedRepository.forms[name];
    if (!form) {
      throw new PrismicError.PrismicError(`Form with name "${name}" could not be found`, void 0, void 0);
    }
    return form;
  }
  async getResolvedRefString(params) {
    var _a, _b;
    if (this.refState.autoPreviewsEnabled) {
      let previewRef;
      let cookieJar;
      if ((_a = this.refState.httpRequest) == null ? void 0 : _a.headers) {
        if ("get" in this.refState.httpRequest.headers && typeof this.refState.httpRequest.headers.get === "function") {
          cookieJar = this.refState.httpRequest.headers.get("cookie");
        } else if ("cookie" in this.refState.httpRequest.headers) {
          cookieJar = this.refState.httpRequest.headers.cookie;
        }
      } else if ((_b = globalThis.document) == null ? void 0 : _b.cookie) {
        cookieJar = globalThis.document.cookie;
      }
      if (cookieJar) {
        previewRef = getPreviewCookie.getPreviewCookie(cookieJar);
      }
      if (previewRef) {
        return previewRef;
      }
    }
    const cachedRepository = await this.getCachedRepository(params);
    const refModeType = this.refState.mode;
    if (refModeType === RefStateMode.ReleaseID) {
      return findRefByID.findRefByID(cachedRepository.refs, this.refState.releaseID).ref;
    } else if (refModeType === RefStateMode.ReleaseLabel) {
      return findRefByLabel.findRefByLabel(cachedRepository.refs, this.refState.releaseLabel).ref;
    } else if (refModeType === RefStateMode.Manual) {
      const res = await castThunk.castThunk(this.refState.ref)();
      if (typeof res === "string") {
        return res;
      }
    }
    return findMasterRef.findMasterRef(cachedRepository.refs).ref;
  }
  async fetch(url, params = {}) {
    const res = await this.fetchFn(url, {
      signal: params.signal
    });
    let json;
    try {
      json = await res.json();
    } catch {
      if (res.status === 404) {
        throw new NotFoundError.NotFoundError(`Prismic repository not found. Check that "${this.endpoint}" is pointing to the correct repository.`, url, void 0);
      } else {
        throw new PrismicError.PrismicError(void 0, url, void 0);
      }
    }
    switch (res.status) {
      case 200: {
        return json;
      }
      case 400: {
        throw new ParsingError.ParsingError(json.message, url, json);
      }
      case 401:
      case 403: {
        throw new ForbiddenError.ForbiddenError("error" in json ? json.error : json.message, url, json);
      }
    }
    throw new PrismicError.PrismicError(void 0, url, json);
  }
}
exports.Client = Client;
exports.GET_ALL_QUERY_DELAY = GET_ALL_QUERY_DELAY;
exports.REPOSITORY_CACHE_TTL = REPOSITORY_CACHE_TTL;
exports.createClient = createClient;
//# sourceMappingURL=client.cjs.map
